/**
 *  Class Role
 *
 *  Class Role is a TypeORM entity which is used to model role data
 *
 *  @property   {number}    id          - A unique ID associated to a Role record. Generated by the database
 *  @property   {string}    roleName    - The the name of the role. Unique/not null
 *  @property   {string}    description - A description of the role. Unique/not null
 *  @property   {User[]}    users       - An array of the users which are associated with the Role
 *
 *
 */

import {Column, Entity, ManyToMany, PrimaryGeneratedColumn} from "typeorm";
import {User} from "./User";
import {ApiResponse} from "../ApiResponse";
import {ValidationError} from "../ValidationError";
import {ValidationErrors} from "../ValidationErrors";
import {Roles} from "../Roles";

@Entity()
export class Role {

    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    roleName: string;

    @Column({length: 1024})
    description: string;

    @ManyToMany(() => User, user => user.roles)
    users: User[];

    validate(): ApiResponse<Map<string, ValidationError[]>> {
        const validationErrors: Map<string, ValidationError[]> = new Map();
        const possibleRoleNames = Object.values(Roles);

        /*** Validate roleName ***/
        if(this.roleName === '' || this.roleName === undefined) {
            const err = new ValidationError('roleName', ValidationErrors.MISSING_VALUE);

            if(validationErrors.has('roleName')) {
                validationErrors.get('roleName').push(err);
            }
            else {
                validationErrors.set('roleName', [err]);
            }
        }
        else if(!possibleRoleNames.includes(this.roleName)) {
            const err = new ValidationError('roleName', ValidationErrors.INVALID_VALUE);
            if(validationErrors.has('roleName')) {
                validationErrors.get('roleName').push(err);
            }
            else {
                validationErrors.set('roleName', [err]);
            }
        }

        if (validationErrors.size === 0) {
            return new ApiResponse<Map<string, ValidationError[]>>(200, 'Model is valid', validationErrors);
        }

        return new ApiResponse<Map<string, ValidationError[]>>(422, 'Model is invalid', validationErrors);
    }
}